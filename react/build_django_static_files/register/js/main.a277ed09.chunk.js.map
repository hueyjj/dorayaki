{"version":3,"sources":["logo.svg","util.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","console","log","loginFormData","FormData","append","App","className","src","logo","alt","href","target","rel","onClick","fetch","method","headers","Accept","then","resp","json","data","credentials","body","text","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,8KCApC,SAASC,EAAUC,GACtB,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE5B,IADA,IAAIC,EAAUF,SAASC,OAAOE,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,IAAIH,EAASC,EAAQE,GAAGE,OAExB,GAAIL,EAAOM,UAAU,EAAGT,EAAKO,OAAS,KAAQP,EAAO,IAAM,CACvDC,EAAcS,mBAAmBP,EAAOM,UAAUT,EAAKO,OAAS,IAChE,OAKZ,OADAI,QAAQC,IAAI,iBAAmBX,GACxBA,EAGJ,IAuBDY,EAAgB,IAAIC,SAC1BD,EAAcE,OAAO,WAAY,iBACjCF,EAAcE,OAAO,WAAY,OAE1B,ICTQC,EAzBO,WACpB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBAUF,4BAAQC,QAAS,WDVrBC,MAAM,wCAAyC,CAC7CC,OAAQ,MACRC,QAAS,CACPC,OAAQ,sBAGTC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJrB,QAAQC,IAAIoB,QCEZ,iBACA,4BAAQR,QAAS,WDgBrBC,MAAM,oCAAqC,CACzCC,OAAQ,OACRO,YAAa,UACbN,QAAS,CACP,OAAU,MACV,cAAe5B,EAAU,cAE3BmC,KAAMrB,IAMLgB,MAAK,SAAAC,GAAI,OAAIA,EAAKK,UAClBN,MAAK,SAAAG,GACJrB,QAAQC,IAAIoB,QC/BZ,SACA,4BAAQR,QAAS,WDCrBC,MAAM,8BAA+B,CACnCQ,YAAa,YAEdJ,MAAK,SAAAC,GAAI,OAAIA,EAAKK,UAClBN,MAAK,SAAAG,GACJrB,QAAQC,IAAIoB,QCNV,oBClBcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxC,SAASyC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.a277ed09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","export function getCookie(name: string): string {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        let cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            let cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    console.log(\"Cookie value: \" + cookieValue);\n    return cookieValue as string;\n}\n\nexport const fetchThreads = () => {\n  fetch(\"http://localhost:8000/api/v1/threads/\", {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n    }\n  })\n    .then(resp => resp.json())\n    .then(data => {\n      console.log(data);\n    });\n}\n\nexport const getCsrfToken = () => {\n  fetch(\"http://localhost:8000/poop/\", {\n    credentials: \"include\",\n  })\n  .then(resp => resp.text())\n  .then(data => {\n    console.log(data);\n  });\n}\n\nconst loginFormData = new FormData();\nloginFormData.append(\"username\", \"foo@gmail.com\")\nloginFormData.append(\"password\", \"bar\")\n\nexport const login = () => {\n  fetch(\"http://localhost:8000/auth/login/\", {\n    method: \"POST\",\n    credentials: \"include\",\n    headers: {\n      \"Accept\": \"*/*\",\n      \"X-CSRFToken\": getCookie(\"csrftoken\"),\n    },\n    body: loginFormData,\n    // body: JSON.stringify({\n    //   \"username\": \"foo@gmail.com\",\n    //   \"password\": \"bar\",\n    // }),\n  })\n    .then(resp => resp.text())\n    .then(data => {\n      console.log(data);\n    });\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { \n  fetchThreads, \n  login, \n  getCsrfToken,\n} from \"./util\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n\n      <button onClick={() => fetchThreads()}>Fetch threads</button>\n      <button onClick={() => login()}>login</button>\n      <button onClick={() => getCsrfToken()}>get csrf token</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}